#!/usr/bin/env bash
argc_branch=""
argc_message=""

set -euo pipefail

argc_timeout="arbitrary definition to make shellcheck happy"

# @cmd Grab the latest changes from the remote, and set a timer to remind you to switch
# @arg timeout=10 The time in minutes to wait before reminding you to switch
grab() {
    if [ "$argc_timeout" -eq 10 ]; then
        argc_timeout="${MOBBY_DEFAULT_TIMEOUT:-10}"
    fi
    osascript -e 'tell application "System Events" to keystroke "f" using {shift down, command down, option down}' >/dev/null 2>&1
    osascript -e 'tell application "System Events" to keystroke "s"' >/dev/null 2>&1

    if [ -d ".jj" ]; then
        branch_name=$(<.mobby)
        jj fetch
        jj new "$branch_name"

    elif [ -d ".git" ]; then
        git pull --rebase
    else
        echo "No recognized version control system found."
        exit 1
    fi

    start
}

# @cmd Start the timer without doing anything else
# @arg timeout=10 The time in minutes to wait before reminding you to switch
start() {
    if [ "$argc_timeout" -eq 10 ]; then
        argc_timeout="${MOBBY_DEFAULT_TIMEOUT:-10}"
    fi
    seconds=$((argc_timeout * 60))
    (sleep $seconds && cowsay "Time to Switch" && say "Time to switch") &
    cowsay <<EOF
  Go Driver, Go!

  You have $argc_timeout minutes left!
EOF
}

# @cmd add all changes, commit and push
# @arg message The commit message
share() {
    top=$(git rev-parse --show-toplevel)
    (
        cd "$top" || exit
        if [ -d ".jj" ]; then
            branch_name=$(<.mobby)
            if [ -n "$argc_message" ]; then
                jj describe -m "WIP: $argc_message"
            else
                jj describe -m "WIP"
            fi
            jj bookmark move "$current_branch"
            jj git push
        elif [ -d ".git" ]; then
            # Create .mobby file with current branch name
            current_branch=$(git rev-parse --abbrev-ref HEAD)
            echo "$current_branch" >.mobby
            git add .
            if [ -n "$argc_message" ]; then
                git commit -am "WIP: $argc_message"
            else
                git commit -am "WIP"
            fi
            git push
        else
            echo "No recognized version control system found."
            exit 1
        fi
    )
}

# @cmd Show the current branch from the .mobby file
branch() {
    if [ -f ".mobby" ]; then
        current_branch=$(<.mobby)
        echo "Current branch: $current_branch"
    else
        echo ".mobby file not found."
        exit 1
    fi
}

# @cmd Rebase off of main. Make sure to have a clean workspace first
# @arg args~
remain() {
    git checkout main
    git pull --rebase
    git checkout -
    git rebase main
    git push --force-with-lease
}

# @cmd start a new story branch and push it to the remote
# @arg branch! The branch name to use
#if we want to start a new branch
new() {
    git checkout -b "$argc_branch"
    git push --set-upstream origin "$argc_branch"
}

# @cmd finish a story branch: rebase on main, create a final commit message, then interactives rebase
# @arg args~
#when we are done with the branch
finish() {
    git checkout main
    git pull --rebase
    git checkout -
    git rebase main
    git commit --allow-empty
    git rebase -i main
}

# @cmd What is mobby?
# @arg args~
#when we want to understand how to use mobby
help() {
    echo "help"
}

eval "$(argc --argc-eval "${BASH_SOURCE[0]}" "$@")"
